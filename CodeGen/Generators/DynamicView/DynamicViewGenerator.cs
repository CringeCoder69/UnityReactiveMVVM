using System;
using System.Linq;
using System.Text;
using CodeGen.GeneratorStaff;
using Microsoft.CodeAnalysis;

namespace CodeGen.Generators.DynamicView
{
    [Generator]
    internal class DynamicViewGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new DynamicViewSyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (!(context.SyntaxReceiver is DynamicViewSyntaxReceiver receiver))
                return;

            try
            {
                foreach (var viewInfo in receiver.Views)
                {

                    if (!viewInfo.IsDynamic || !viewInfo.NeedGeneration)
                        continue;

                    var viewName = viewInfo.Name;
                    var viewModelName = viewInfo.ViewModelName;

                    if (!receiver.ViewModelInheritance.TryGetValue(viewModelName, out var descendants))
                        continue;

                    var generationData = new GenerationData
                    {
                        Namespace = viewInfo.Namespace,
                        ClassName = viewName,
                    };

                    generationData.Usings.Add("UnityEngine");

                    foreach (var descendant in descendants)
                    {
                        if (receiver.ViewModels.TryGetValue(descendant, out var viewModelInfo))
                        {
                            generationData.Usings.Add(viewModelInfo.View.Namespace);
                            generationData.NestedViewModels.Add(new Property
                            {
                                Name = viewModelInfo.View.Name,
                                Type = viewModelInfo.View.Name,
                            });
                        }
                    }

                    var source = GeneratePartialClass(generationData);
                    context.AddSource($"{viewName}.bindings.cs", source);
                }
            }
            catch (Exception ex)
            {
                context.AddSource("Exception", ex.Message);
            }
        }

        private string GeneratePartialClass(GenerationData data)
        {
            var sb = new StringBuilder();

            sb.AppendLine("// <auto-generated />");

            Common.PrintUsings(data, sb);

            if (!string.IsNullOrEmpty(data.Namespace))
            {
                sb.AppendLine($"namespace {data.Namespace}");
                sb.AppendLine("{");
            }

            sb.AppendLine($"    public partial class {data.ClassName}");
            sb.AppendLine("    {");

            foreach (var viewModel in data.NestedViewModels)
                sb.AppendLine($"        [SerializeField] private {viewModel.Type} {viewModel.Name};");

            sb.AppendLine("        protected override void InitializeSubViewMap()");
            sb.AppendLine("        {");

            foreach (var viewModel in data.NestedViewModels)
                sb.AppendLine($"            RegisterView({viewModel.Name});");

            sb.AppendLine("        }");
            sb.AppendLine("    }");

            if (!string.IsNullOrEmpty(data.Namespace))
                sb.AppendLine("}");

            return sb.ToString();
        }
    }
}
